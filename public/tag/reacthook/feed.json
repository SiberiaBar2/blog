{
    "version": "https://jsonfeed.org/version/1",
    "title": "Queek blog • All posts by \"reacthook\" tag",
    "description": "like dream",
    "home_page_url": "https://queek.cn",
    "items": [
        {
            "id": "https://queek.cn/2025/04/28/2025-04-28-react-custom-hook-four/",
            "url": "https://queek.cn/2025/04/28/2025-04-28-react-custom-hook-four/",
            "title": "react-custom-hook-four",
            "date_published": "2025-04-28T01:22:08.000Z",
            "content_html": "<h3 id=\"useIsFirstRender\"><a href=\"#useIsFirstRender\" class=\"headerlink\" title=\"useIsFirstRender\"></a>useIsFirstRender</h3><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这个hook 会在首次渲染的时候返回一个为true的布尔值 </span><br><span class=\"line\"></span><br><span class=\"line\">为什么需要这个hook？</span><br><span class=\"line\"></span><br><span class=\"line\">我们常常在组件首次渲染的时候需要执行一些方法 ，或者是首次指定默认值，（在一些组件中指定默认值失效的情况下会非常有用）</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">useIsFirstRender</span> = (<span class=\"params\"><span class=\"attr\">deps</span>: [] <span class=\"keyword\">as</span> <span class=\"built_in\">unknown</span>[], <span class=\"attr\">noDeps</span>: [] <span class=\"keyword\">as</span> <span class=\"built_in\">unknown</span>[]</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> isFirstRender = <span class=\"title function_\">useRef</span>(<span class=\"literal\">false</span>)</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * </span></span><br><span class=\"line\"><span class=\"comment\">  * 为什么需要指定依赖项？</span></span><br><span class=\"line\"><span class=\"comment\">  * </span></span><br><span class=\"line\"><span class=\"comment\">  * 页面首次渲染可能会更新多次 多个状态或props的先后更新会导致 即便是首次加载页面 组件也会多次更新</span></span><br><span class=\"line\"><span class=\"comment\">  *  </span></span><br><span class=\"line\"><span class=\"comment\">  * 这将会导致我们的hook记录失效！ß</span></span><br><span class=\"line\"><span class=\"comment\">  *  </span></span><br><span class=\"line\"><span class=\"comment\">  * 因此 只在我们指定的状态更新才开始计数。</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    isFirstRender.<span class=\"property\">current</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;,[...deps])</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 在有些状态变化的情况下</span></span><br><span class=\"line\"><span class=\"comment\">  *</span></span><br><span class=\"line\"><span class=\"comment\">\t* 我们依然希望使用默认的初始值，这个时候你应该指定这些变量，来在他们更新时，返回true来保证使用的仍然是初始值</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    isFirstRender.<span class=\"property\">current</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;,[...noDeps])</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t\tisFirstRender.<span class=\"property\">current</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      sFirstRender.<span class=\"property\">current</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,[])</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">isFirstRender</span>: isFirstRender.<span class=\"property\">current</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"useDepsNoRender\"><a href=\"#useDepsNoRender\" class=\"headerlink\" title=\"useDepsNoRender\"></a>useDepsNoRender</h3><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如你所见</span><br><span class=\"line\"></span><br><span class=\"line\">当状态更新时，不执行回调的hook。</span><br><span class=\"line\"></span><br><span class=\"line\">为什么需要这个hook?</span><br><span class=\"line\"></span><br><span class=\"line\">因为组件的bug，我们在回显时不能回填数据（数据会丢失，即便你赋值前值是全量的），</span><br><span class=\"line\"></span><br><span class=\"line\">需要多次更新才能正常回显，</span><br><span class=\"line\"></span><br><span class=\"line\">因此在页面首次加载时，通过多次渲染回填数据。</span><br><span class=\"line\"></span><br><span class=\"line\">首次渲染即使依赖更新了，我们依然执行回调，来完成数据回显。</span><br><span class=\"line\"></span><br><span class=\"line\">而在后续的渲染中（数据已经正常回填，组件中其他状态发生了改变，导致组件渲染此时不会执行回调，</span><br><span class=\"line\"></span><br><span class=\"line\">前提是你把导致组件渲染的状态写入了这个hook的依赖）</span><br><span class=\"line\"></span><br><span class=\"line\">他是一个数据回填但数据丢失，</span><br><span class=\"line\"></span><br><span class=\"line\">你需要在首次加载回显数据，而后续不再执行的一个hook。</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">useDepsNoRender</span> = (<span class=\"params\"><span class=\"attr\">callback</span>: () =&gt; <span class=\"built_in\">void</span>, <span class=\"attr\">deps</span>: <span class=\"built_in\">unknown</span>[], firstRender = <span class=\"literal\">true</span></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> isUpdate = <span class=\"title function_\">useRef</span>(<span class=\"literal\">false</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; isFirstRender &#125; = <span class=\"title function_\">useIsFirstRender</span>(deps)</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    isUpdate.<span class=\"property\">current</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    isUpdate.<span class=\"property\">current</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;, [...deps])</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (firstRender &amp;&amp; isFirstRender) &#123;</span><br><span class=\"line\">      isUpdate.<span class=\"property\">current</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, [firstRender, isFirstRender])</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(isUpdate.<span class=\"property\">current</span>) callback?.()</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"usePerformanceModel\"><a href=\"#usePerformanceModel\" class=\"headerlink\" title=\"usePerformanceModel\"></a>usePerformanceModel</h3><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">简化umi useModel 的取值 有类型提示</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useModel &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;umi&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// Parameters 利用提取 useModel 第一个参数，来取到所有的 ModelName</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">ModelNames</span> = <span class=\"title class_\">Parameters</span>&lt;<span class=\"keyword\">typeof</span> useModel&gt;[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"comment\">// 根据指定的 ModelName 来拿到 useModel 的返回值（对应的 model state）</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">ModelState</span>&lt;N <span class=\"keyword\">extends</span> <span class=\"title class_\">ModelNames</span>&gt; = <span class=\"title class_\">ReturnType</span>&lt;<span class=\"keyword\">typeof</span> useModel&lt;N&gt;&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> usePerformanceModel = &lt;N <span class=\"keyword\">extends</span> <span class=\"title class_\">ModelNames</span>, K <span class=\"keyword\">extends</span> keyof <span class=\"title class_\">ModelState</span>&lt;N&gt;&gt;<span class=\"function\">(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  <span class=\"attr\">modelName</span>: N,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  <span class=\"attr\">keys</span>: K[]</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"></span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">useModel</span>(modelName, <span class=\"function\">(<span class=\"params\">state</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> keys.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">prev, key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (prev[key]) <span class=\"keyword\">return</span> prev;</span><br><span class=\"line\">      prev[key] = state[key];</span><br><span class=\"line\">      <span class=\"keyword\">return</span> prev;</span><br><span class=\"line\">    &#125;, &#123;&#125; <span class=\"keyword\">as</span> <span class=\"title class_\">Pick</span>&lt;<span class=\"title class_\">ModelState</span>&lt;N&gt;, K&gt;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n",
            "tags": [
                "reacthook"
            ]
        }
    ]
}
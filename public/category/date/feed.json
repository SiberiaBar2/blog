{
    "version": "https://jsonfeed.org/version/1",
    "title": "Queek blog • All posts by \"date\" category",
    "description": "like dream",
    "home_page_url": "https://queek.cn",
    "items": [
        {
            "id": "https://queek.cn/2025/08/24/2025-08-24-25-August-24/",
            "url": "https://queek.cn/2025/08/24/2025-08-24-25-August-24/",
            "title": "25-August-24",
            "date_published": "2025-08-24T03:41:25.000Z",
            "content_html": "<h3 id=\"ts声明函数类型\"><a href=\"#ts声明函数类型\" class=\"headerlink\" title=\"ts声明函数类型\"></a>ts声明函数类型</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">CbCallback</span> &#123;</span><br><span class=\"line\">  (<span class=\"attr\">cb</span>: <span class=\"function\">() =&gt;</span> <span class=\"built_in\">void</span>): <span class=\"built_in\">void</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">c</span>: <span class=\"title class_\">CbCallback</span> = <span class=\"function\">() =&gt;</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这里不传参数或者类型不正确就会报错</span></span><br><span class=\"line\"><span class=\"title function_\">c</span>(<span class=\"function\">() =&gt;</span> &#123;&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vant-checkboxGroup-组件对于使用对象作为值时的回显\"><a href=\"#vant-checkboxGroup-组件对于使用对象作为值时的回显\" class=\"headerlink\" title=\"vant-checkboxGroup 组件对于使用对象作为值时的回显\"></a>vant-checkboxGroup 组件对于使用对象作为值时的回显</h3><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在移动开发中</span><br><span class=\"line\"></span><br><span class=\"line\">需要对后续复杂操作处理</span><br><span class=\"line\"></span><br><span class=\"line\">这时候设置设置单纯的基本类型值就不够用了</span><br><span class=\"line\"></span><br><span class=\"line\">我们需要将checkboxGroup选择的值设置为对象 </span><br><span class=\"line\"></span><br><span class=\"line\">也就是name为一个对象</span><br><span class=\"line\"></span><br><span class=\"line\">但是后续如果需要回显</span><br><span class=\"line\"></span><br><span class=\"line\">就会发现无法回显了</span><br><span class=\"line\"></span><br><span class=\"line\">这是因为回显的对象引用和渲染列表的对象引用不一致，是两个不同的对象</span><br><span class=\"line\"></span><br><span class=\"line\">因此是无法回显的</span><br><span class=\"line\"></span><br><span class=\"line\">我们需要将要回显的对象引用和整个渲染列其中的对象引用保持一致</span><br><span class=\"line\"></span><br><span class=\"line\">也就是设置的result变量数组中的选中项 </span><br><span class=\"line\"></span><br><span class=\"line\">要和list中对一个的哪一项对象引用一致，就可以正常回显</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;van-checkbox-group v-model=<span class=\"string\">&quot;result&quot;</span> ref=<span class=\"string\">&quot;checkboxGroup&quot;</span>&gt;</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">van-checkbox</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;a&quot;</span>&gt;</span>复选框 a<span class=\"tag\">&lt;/<span class=\"name\">van-checkbox</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">van-checkbox</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;b&quot;</span>&gt;</span>复选框 b<span class=\"tag\">&lt;/<span class=\"name\">van-checkbox</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">van-checkbox</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;c&quot;</span>&gt;</span>复选框 c<span class=\"tag\">&lt;/<span class=\"name\">van-checkbox</span>&gt;</span></span></span><br><span class=\"line\">&lt;/van-checkbox-group&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;van-checkbox-group v-model=<span class=\"string\">&quot;result&quot;</span> ref=<span class=\"string\">&quot;checkboxGroup&quot;</span>&gt;</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">van-checkbox</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;item in list&quot;</span> <span class=\"attr\">:name</span>=<span class=\"string\">&quot;item&quot;</span>&gt;</span>&#123;&#123;item.title&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">van-checkbox</span>&gt;</span></span></span><br><span class=\"line\">&lt;/van-checkbox-group&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在watch中监听到变化</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">result</span> = [...<span class=\"variable language_\">this</span>.<span class=\"property\">list</span>, ...<span class=\"variable language_\">this</span>.<span class=\"property\">checkedList</span>]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"react-通过传递不同的key来清空子组件状态\"><a href=\"#react-通过传递不同的key来清空子组件状态\" class=\"headerlink\" title=\"react 通过传递不同的key来清空子组件状态\"></a>react 通过传递不同的key来清空子组件状态</h3><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如何在父组件渲染变化时，清空子组件的状态</span><br><span class=\"line\"></span><br><span class=\"line\">父组件状态更新时候   子组件也会更新  </span><br><span class=\"line\"></span><br><span class=\"line\">虽然会更新，但是子组件不会丢失其已经存在的状态</span><br><span class=\"line\"></span><br><span class=\"line\">那么每次在父组件更新时，</span><br><span class=\"line\"></span><br><span class=\"line\">传递给子组件每次不同的key属性</span><br><span class=\"line\"></span><br><span class=\"line\">子组件就会清空其内部状态（因为是一个全新的组件了）</span><br><span class=\"line\"></span><br><span class=\"line\">这样</span><br><span class=\"line\"></span><br><span class=\"line\">我们就能避免复杂的清空函数</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">&lt;<span class=\"title class_\">Child</span> key=&#123;key&#125; userId=&#123;userId&#125; /&gt;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"关于何时该使用useEffect\"><a href=\"#关于何时该使用useEffect\" class=\"headerlink\" title=\"关于何时该使用useEffect\"></a>关于何时该使用useEffect</h3><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">尽可能在渲染期间进行计算</span><br><span class=\"line\"></span><br><span class=\"line\">不要链式的在effect中set  然后下一个effect依赖上一个effect中set后的值  这样非常低效</span><br><span class=\"line\"></span><br><span class=\"line\">effect在页面显示 （初次加载时）要执行一些逻辑  这个时候应该使用它</span><br><span class=\"line\"></span><br><span class=\"line\">用户操作的动作导致state发生改变, 这时不应该使用effect监听这个状态 继而 去更新其他状态  这并不合理</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"params\">#</span> 你可能并不需要effect</span><br><span class=\"line\"></span><br><span class=\"line\">https://zh-hans.react.dev/learn/you-might-not-need-an-effect</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"react-useSyncExternalStore-hook\"><a href=\"#react-useSyncExternalStore-hook\" class=\"headerlink\" title=\"react useSyncExternalStore hook\"></a>react useSyncExternalStore hook</h3><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useSyncExternalStore 接收三个函数参数</span><br><span class=\"line\"></span><br><span class=\"line\">第一个是订阅，</span><br><span class=\"line\"></span><br><span class=\"line\">  第一个订阅函数接收一个回调，执行这个回调可以触发react更新渲染，</span><br><span class=\"line\"></span><br><span class=\"line\">  这个订阅函数通常代表订阅了这个hook的组件更新函数，</span><br><span class=\"line\"></span><br><span class=\"line\">   你可以把这个订阅函数看做触发器dispath</span><br><span class=\"line\"></span><br><span class=\"line\">   一般我们在订阅函数用不急于执行触发器，</span><br><span class=\"line\"></span><br><span class=\"line\">   可以把它存储起来，</span><br><span class=\"line\"></span><br><span class=\"line\">   等到其他动作执行需要更新渲染组件的时候，</span><br><span class=\"line\"></span><br><span class=\"line\">   在把存储的所有dispath列表全部执行。</span><br><span class=\"line\"></span><br><span class=\"line\">   如果有多个组件的useSyncExternalStore 的订阅函数和快照函数都出自同一个实例，</span><br><span class=\"line\"></span><br><span class=\"line\">   那么他们将会共享状态，</span><br><span class=\"line\"></span><br><span class=\"line\">   实现另类的react状态数据共享</span><br><span class=\"line\"></span><br><span class=\"line\">第二个是快照，</span><br><span class=\"line\"></span><br><span class=\"line\">第三个是服务端渲染的快照，第二个和第三个返回的快照的内容必须相同</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用useSyncExternalStore的状态共享\"><a href=\"#使用useSyncExternalStore的状态共享\" class=\"headerlink\" title=\"使用useSyncExternalStore的状态共享\"></a>使用useSyncExternalStore的状态共享</h4><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> cbs = [];</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">useStorage</span> = (<span class=\"params\">key, initValue</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">//订阅者</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">subscribe</span> = (<span class=\"params\">cb</span>) =&gt; &#123;</span><br><span class=\"line\">    cbs = [...cbs, cb];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      cbs = cbs.<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">l</span> =&gt;</span> l !== cb);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">emitChange</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> cb <span class=\"keyword\">of</span> cbs) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">cb</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//返回当前快照</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">getSnapshot</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">getItem</span>(key) ? <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(<span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">getItem</span>(key)) : initValue</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">updateStorage</span> = (<span class=\"params\">value</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">setItem</span>(key, <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(value))</span><br><span class=\"line\">    <span class=\"comment\">//手动触发Storage的事件 </span></span><br><span class=\"line\">    <span class=\"comment\">// window.dispatchEvent(new StorageEvent(&#x27;storage&#x27;))</span></span><br><span class=\"line\">    <span class=\"title function_\">emitChange</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = <span class=\"title function_\">useSyncExternalStore</span>(subscribe, getSnapshot)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [res, updateStorage]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [count1, setCount1] = <span class=\"title function_\">useStorage</span>(<span class=\"string\">&#x27;count1&#x27;</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> (</span><br><span class=\"line\">  &lt;div className=&quot;container mx-auto px-4 py-8 max-w-3xl&quot;&gt;</span><br><span class=\"line\">    &lt;header className=&quot;mb-8 text-center&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        count</span><br><span class=\"line\">        &lt;span&gt;</span><br><span class=\"line\">          &#123;count1&#125;</span><br><span class=\"line\">        &lt;/span&gt;</span><br><span class=\"line\">        &lt;button onClick=&#123;() =&gt; setCount1(count1 + 1)&#125;&gt;新增&lt;/button&gt;</span><br><span class=\"line\">        &lt;button onClick=&#123;() =&gt; setCount1(count1 - 1)&#125;&gt;减少&lt;/button&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vue模版中的“解构赋值”\"><a href=\"#vue模版中的“解构赋值”\" class=\"headerlink\" title=\"vue模版中的“解构赋值”\"></a>vue模版中的“解构赋值”</h3><figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过下面这种绑定一个动态对象的方式</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将所有属性给到组件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于 react 当中的 </span></span><br><span class=\"line\"><span class=\"comment\">// react</span></span><br><span class=\"line\">&lt;<span class=\"title class_\">Child</span>  &#123;...props&#125;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// vue</span></span><br><span class=\"line\"><span class=\"comment\">// 如果接受的组件内部已经定义了这些同名属性，传入的属性将无法覆盖，</span></span><br><span class=\"line\"><span class=\"comment\">// 考虑使用计算属性合并新旧属性值</span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Popup</span> </span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">  <span class=\"attr\">...</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">  <span class=\"attr\">..</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">  <span class=\"attr\">.</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">  <span class=\"attr\">:pageConfig</span>=<span class=\"string\">&quot;&#123;round: false, closeable: true&#125;&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">/&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加一个微任务\"><a href=\"#添加一个微任务\" class=\"headerlink\" title=\"添加一个微任务\"></a>添加一个微任务</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">addMicrotask</span>(<span class=\"params\">callback</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> queueMicrotask === <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">queueMicrotask</span>(callback)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">    <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(callback)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"关于react组件拆分时的状态控制\"><a href=\"#关于react组件拆分时的状态控制\" class=\"headerlink\" title=\"关于react组件拆分时的状态控制\"></a>关于react组件拆分时的状态控制</h3><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果父组件有多个子组件，</span><br><span class=\"line\"></span><br><span class=\"line\">子组件需要根据父组件的状态来更新自身，</span><br><span class=\"line\"></span><br><span class=\"line\">这种情况下，</span><br><span class=\"line\"></span><br><span class=\"line\">应该把父组件传递给子组件的属性统一放到一个对象中维护，</span><br><span class=\"line\"></span><br><span class=\"line\">这样不管什么状态发生变化，</span><br><span class=\"line\"></span><br><span class=\"line\">都只更新这个对象，</span><br><span class=\"line\"></span><br><span class=\"line\">不会带来多次的重复渲染，</span><br><span class=\"line\"></span><br><span class=\"line\">带来性能问题。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n",
            "tags": [
                "date"
            ]
        }
    ]
}